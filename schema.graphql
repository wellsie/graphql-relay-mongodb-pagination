"""
Input type of AddArticle.
"""
input AddArticleInput {
  """
  The text of an article.
  """
  text: String!
}

"""
Return type of AddArticle.
"""
type AddArticlePayload {
  """
  The newly created Article.
  """
  article: Article
}

"""
An article contains information for an article.
"""
type Article implements Node {
  """
  A unique identifier for an article.
  """
  id: ID!

  """
  The text of an article.
  """
  text: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the date and time when the object was last updated.
  This value is the same as `createdAt` if the item has not yet
  been updated since it was created.
  """
  updatedAt: DateTime!
}

"""
The connection type for an article.
"""
type ArticleConnection {
  """
  A list of edges.
  """
  edges: [ArticleEdge]

  """
  A list of nodes.
  """
  nodes: [Article]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Represents an article.
"""
type ArticleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!

  """
  The item at the end of an edge.
  """
  node: Article!
}

"""
Contains base64 encoded cursor information.
"""
scalar Cursor

"""
An ISO-8601 encoded UTC date string.
"""
scalar DateTime

"""
Return type for uploaded file
"""
type File {
  """
  The file name of an uploaded file.
  """
  filename: String!
  """
  The mime type of an uploaded file.
  """
  mimetype: String!
  """
  The encoding of an uploaded file.
  """
  encoding: String!
}

"""
The root query for implementing GraphQL mutations.
"""
type Mutation {
  """
  Adds an Article.
  """
  addArticle(input: AddArticleInput!): AddArticlePayload!

  """
  Upload one file.
  """
  singleUpload(file: Upload!): File!

  """
  Upload multiple files.
  """
  multipleUpload(files: [Upload!]!): [File!]!
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
}

"""
The query root of this demos GraphQL interface.
"""
type Query {
  """
  A list of all articles.
  """
  articles(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor
  ): ArticleConnection
  """
  Lookup current viewer.
  """
  viewer: Viewer
}

"""
A viewer.
"""
type Viewer {
  """
  A unique identifier for the viewer.
  """
  id: ID!
}
